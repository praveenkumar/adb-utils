#!/usr/bin/env bash

# Export get_ip_address
. /opt/adb/openshift/get_ip_address

# Prepare, configure and start OpenShift

set -o pipefail
set -o nounset

export ORIGIN_DIR="/var/lib/openshift"
export OPENSHIFT_DIR=${ORIGIN_DIR}/openshift.local.config/master
export KUBECONFIG=${OPENSHIFT_DIR}/admin.kubeconfig
eval "OPENSHIFT_SUBDOMAIN=${OPENSHIFT_SUBDOMAIN}"

# Default values for proxy
HTTP_PROXY=${HTTP_PROXY:-""}
HTTPS_PROXY=${HTTPS_PROXY:-""}
NO_PROXY=${NO_PROXY:-""}


# Get machine IP address
ip=$(get_ip_address)

# Proxy setup config
read -r -d '' PROXY_CONFIG << EOM
kubernetesMasterConfig:
  admissionConfig:
    pluginConfig:
      BuildDefaults:
        configuration:
          apiVersion: v1
          env:
          - name: HTTP_PROXY
            value: $HTTP_PROXY
          - name: HTTPS_PROXY
            value: $HTTPS_PROXY
          - name: NO_PROXY
            value: $NO_PROXY
          gitHTTPProxy: $HTTP_PROXY
          gitHTTPSProxy: $HTTPS_PROXY
          kind: BuildDefaultsConfig
EOM


########################################################################
# Helper function to start OpenShift as container
#
# All passed paramters are passed through ti
########################################################################
start_openshift() {
        docker run $1 --name "openshift" --privileged --net=host --pid=host \
        -w ${ORIGIN_DIR} \
        -e "KUBECONFIG=${OPENSHIFT_DIR}/admin.kubeconfig" \
        -e "NO_PROXY=${NO_PROXY}" \
        -e "HTTP_PROXY=${HTTP_PROXY}" \
        -e "HTTPS_PROXY=${HTTPS_PROXY}" \
        -v /:/rootfs:ro \
        -v /var/run:/var/run:rw \
        -v /sys:/sys:ro \
        -v /var/lib/docker:/var/lib/docker:rw \
        -v ${ORIGIN_DIR}/openshift.local.volumes:${ORIGIN_DIR}/openshift.local.volumes:rslave,z \
        -v ${ORIGIN_DIR}/openshift.local.config:${ORIGIN_DIR}/openshift.local.config:z \
        -v ${ORIGIN_DIR}/openshift.local.etcd:${ORIGIN_DIR}/openshift.local.etcd:z \
        $IMAGE start "${@:2}"
}

########################################################################
# Helper function to remove existing openshift container
########################################################################
rm_openshift_container() {
    if docker inspect openshift &>/dev/null; then
        docker rm -f -v openshift > /dev/null 2>&1
    fi
}

########################################################################
# Helper function to wait for OpenShift config file generation
########################################################################
wait_for_config_files() {
  echo "[INFO] Waiting for OpenShift config files to be created"
  for i in {1..6}; do
    if [ ! -f ${1} ] || [ ! -f ${2} ]; then
      echo "[INFO] ..."
      sleep 5
    else
      break
    fi
  done
  if [ ! -f ${1} ] || [ ! -f ${2} ]; then
    >&2 echo "[ERROR] Unable to create OpenShift config files"
    docker logs openshift
    exit 1
  fi
}

########################################################################
# Main
########################################################################

# First start OpenShift to just write the config files
master_config=${OPENSHIFT_DIR}/master-config.yaml
node_config=${ORIGIN_DIR}/openshift.local.config/node-$(hostname)/node-config.yaml

# In case of config changes for /etc/sysconfig/openshift_option file
# this block will ensure those options should be updated to respective file
# and service restart will pick latest options.
if [ -f $master_config ]; then
    sed -i.orig -e "s/\(.*subdomain:\).*/\1 $OPENSHIFT_SUBDOMAIN/" ${master_config}
fi

# Configuration for openshift master config file
if [ ! -f $master_config ]; then

    # Prepare directories for bind-mounting
    dirs=(openshift.local.volumes openshift.local.config openshift.local.etcd)
    for d in ${dirs[@]}; do
            mkdir -p ${ORIGIN_DIR}/${d} && chcon -Rt svirt_sandbox_file_t ${ORIGIN_DIR}/${d}
    done

    echo "[INFO] Preparing OpenShift config"
    start_openshift -d --write-config=${ORIGIN_DIR}/openshift.local.config --public-master=$ip > /dev/null 2>&1
    wait_for_config_files ${master_config} ${node_config}

    echo "Create openshift-dev and admin User"
    htpasswd -b -c ${OPENSHIFT_DIR}/user.htpasswd openshift-dev devel
    htpasswd -b ${OPENSHIFT_DIR}/user.htpasswd admin admin

    # Now we need to make some adjustments to the config
    DIR_EXPAND="\/var\/lib\/openshift\/openshift.local.config\/master"
    echo "[INFO] Configuring OpenShift via ${master_config}"
    sed -i.orig -e "s/\(.*subdomain:\).*/\1 $OPENSHIFT_SUBDOMAIN/" ${master_config} \
    -e "s/\(.*masterPublicURL:\).*/\1 https:\/\/$ip:8443/g" \
    -e "s/\(.*publicURL:\).*/\1 https:\/\/$ip:8443\/console\//g" \
    -e "s/\(.*assetPublicURL:\).*/\1 https:\/\/$ip:8443\/console\//g" \
    -e "s/\(.*\)anypassword/\1 htpasswd/" \
    -e "s/\(.*\)kind: AllowAllPasswordIdentityProvider/\1kind: HTPasswdPasswordIdentityProvider\n\1file: ${DIR_EXPAND}\/user.htpasswd/" \
    -e "/corsAllowedOrigins:/,/- localhost/c\corsAllowedOrigins:\n- .*"

    if [[ -n HTTP_PROXY ]]; then
        # Older version of awk not support inplace edit
        awk -v new="$PROXY_CONFIG" '/kubernetesMasterConfig/{print new} /kubernetesMasterConfig/,/pluginConfig/{next} 1' ${master_config} \
            >tmp_file && mv -f tmp_file ${master_config}
    fi

    # Remove the container
    rm_openshift_container
fi


# Now we start the server pointing to the prepared config files
echo "[INFO] Starting OpenShift server"
start_openshift '' --master-config="${master_config}" --node-config="${node_config}"
